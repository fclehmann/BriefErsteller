#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use Term::ANSIColor;
use UI::Dialog;
use File::Copy;

my $d = new UI::Dialog ( backtitle => '', title => 'Briefersteller',
	height => 8, width => 65 , listheight => 5,
	order => [ 'whiptail', 'xdialog', 'dialog', 'zenity', 'gdialog', 'ascii' ] );

my $require_file = $ENV{"HOME"}.'/.briefkoepfe.pl';
my %options = ();
analyze_args(@ARGV);

my %daten = (
);

if(-e $require_file) {
	eval `cat $require_file`;
}

main();

sub main {
	print <<EOF;
Brief-Skript v. 4.01.

Dieses Skript soll helfen, automatisiert Briefköpfe zu erstellen. Dazu müssen einige Fragen beantwortet werden.

Einmal eingegebene Daten werden gespeichert und stehen bei späteren Aufrufen zur Verfügung.

EOF

	my ($name, %this_daten) = get_daten("Empfaenger");

	if(-e $require_file) {
		eval `cat $require_file`;
	}

	my ($sender_name, %sender_daten) = get_daten("Sender");

	my $betreff = '';
	if($options{Betreff}) {
		$betreff = $options{Betreff};
	} else {
		$betreff = do_read("Betreff");
	}

	my $dateiname = '';
	while ($dateiname eq '') {
		if($options{Dateiname}) {
			$dateiname = $options{Dateiname};
		} else {
			while (!$dateiname) {
				$dateiname = do_read("Dateiname (.tex wird automatisch hinzugefügt)");
			}
		}

		$dateiname =~ s#\.tex$##g;
		$dateiname .= '.tex';

		if(-e $dateiname) {
			if ($d->yesno(text => "'$dateiname' existiert bereits. Alte Datei verschieben?")) {
				my $i = 1;
				while (-e "$dateiname.$i") {
					$i++;
				}
				move($dateiname, "$dateiname.$i");
				$d->msgbox(text => "Die alte Datei '$dateiname' wurde nach '$dateiname.$i' verschoben");
			} else {
				$dateiname = '';
			}
		}
	}

	if($dateiname ne '.tex') {
		create_letter(betreff => $betreff, dateiname => $dateiname, empfaenger_daten => \%this_daten, sender_daten => \%sender_daten, name => $name, sender_name => $sender_name);
		my $filename_without_tex = $dateiname;
		$filename_without_tex =~ s#\.tex$##g;
		my $compile_and_run = "latexmk -pdf $dateiname && xdg-open $filename_without_tex.pdf";
		print "\n\n".color("green underline").$compile_and_run.color("reset")."\n";

		if ($d->yesno( text => "Datei in $ENV{EDITOR} oeffnen?") ) {
			system("$ENV{EDITOR} $dateiname")
		}

		if ($d->yesno(text => 'Datei kompilieren und direkt oeffnen?')) {
			system($compile_and_run);
		}
	}
}

sub get_daten {
	my $title = shift;
	my $name = '';
	if($options{$title}) {
		$name = $options{$title};
	} else {
		$name = do_read($title);
	}

	my %this_daten = ();

	if(exists($daten{$name})) {
		%this_daten = %{$daten{$name}};
	} else {
		my @fields = qw/firma strasse plz stadt email telefon anrede gruesse/;
		for (@fields) {
			my $data = do_read(ucfirst($_));
			$this_daten{$_} = $data if defined $data;
		}

		print color("yellow")."Die Daten waren dem Skript nicht bekannt. Sie werden nun in die ~/.briefkoepfe.pl geschrieben und stehen bei späteren Aufrufen zur Verfügung.".color("reset")."\n";

		my $dumper = Dumper \%this_daten;

		my $name_dumper = $name;
		$name_dumper =~ s#"#\\"#g;
		$dumper =~ s#^\$VAR1 = #\$daten{"$name_dumper"} = #;

		open my $fh, '>>', $require_file or die $!;
		print $fh $dumper;
		close $fh;
	}

	return ($name, %this_daten);
}

sub do_read {
	my $name = shift;
	my $str = $d->inputbox(
		text => "$name: ",
		entry => '' 
	);
	if ($d->state() eq "OK") {
		chomp $str;
		return $str;
	} else {
		die(color("red")."Error: ".$d->state().color("reset"));
	}
}

sub create_letter {
	my %par = @_;

	my $letter = <<EOF
\\documentclass{g-brief2}
\\usepackage{ngerman}
\\usepackage[utf8x]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{fourier}
\\usepackage{marvosym}

\\IhrSchreiben{}
\\MeinZeichen{}
EOF
	;

	my %sender_daten = %{$par{sender_daten}};
	my %empfaenger_daten = %{$par{empfaenger_daten}};

	my $empfaenger_adresse = $par{name};
	if(exists($empfaenger_daten{firma}) && $par{name} ne $empfaenger_daten{firma}) {
		$empfaenger_adresse .= "\\\\$empfaenger_daten{firma}";
	}

	if(exists($empfaenger_daten{strasse})) {
		$empfaenger_adresse .= "\\\\$empfaenger_daten{strasse}";
	}

	if(exists($empfaenger_daten{plz}) && exists($empfaenger_daten{stadt})) {
		$empfaenger_adresse .= "\\\\$empfaenger_daten{plz} $empfaenger_daten{stadt}";
	}

	$empfaenger_adresse =~ s#(?:\\\\){2,}#\\\\#;
	$empfaenger_adresse =~ s#(?:\\\s*){1,}$##g;

	foreach my $anrede_gruesse (qw/andrede gruesse/) {
		if($empfaenger_daten{$anrede_gruesse}) {
			$empfaenger_daten{$anrede_gruesse} =~ s#,$##g;
			$empfaenger_daten{$anrede_gruesse} .= ",";
		}
	}

	if($empfaenger_adresse) {
		add_to_letter(\$letter, "Adresse", $empfaenger_adresse);
	} else {
		print color("red")."Keine Empfaenger-Adresse eingegeben!".color("reset")."\n";
	}

	if($empfaenger_daten{gruesse}) {
		add_to_letter(\$letter, "Gruss", $empfaenger_daten{gruesse}, "{0cm}");
	}

	if($empfaenger_daten{anrede}) {
		add_to_letter(\$letter, "Anrede", $empfaenger_daten{anrede});
	}

	if($par{betreff}) {
		add_to_letter(\$letter, "Betreff", $par{betreff});
	}

	if($par{sender_name}) {
		add_to_letter(\$letter, "AdressZeileA", $par{sender_name});
	}

	if($sender_daten{strasse}) {
		add_to_letter(\$letter, "AdressZeileB", $sender_daten{strasse});
	}

	if($sender_daten{plz} && $sender_daten{stadt}) {
		add_to_letter(\$letter, "AdressZeileC", $sender_daten{plz}.' '.$sender_daten{stadt});
	} elsif ($sender_daten{plz} && !$sender_daten{stadt}) {
		add_to_letter(\$letter, "AdressZeileC", $sender_daten{plz});
	} elsif (!$sender_daten{plz} && $sender_daten{stadt}) {
		add_to_letter(\$letter, "AdressZeileC", $sender_daten{stadt});
	}

	if($par{sender_name} || $sender_daten{strasse} || $sender_daten{plz} || $sender_daten{stadt}) {
		my $retour_adress = '';
		if($par{sender_name}) {
			$retour_adress .= $par{sender_name};
		}

		if($sender_daten{strasse}) {
			if($retour_adress) {
				$retour_adress .= ", ";
			}
			$retour_adress .= $sender_daten{strasse};
		}

		if($sender_daten{plz} && $sender_daten{stadt}) {
			if($retour_adress) {
				$retour_adress .= ", ";
			}
			$retour_adress .= $sender_daten{plz}.' '.$sender_daten{stadt};
		} elsif ($sender_daten{plz} && !$sender_daten{stadt}) {
			if($retour_adress) {
				$retour_adress .= ", ";
			}
			$retour_adress .= $sender_daten{plz};
		} elsif (!$sender_daten{plz} && $sender_daten{stadt}) {
			if($retour_adress) {
				$retour_adress .= ", ";
			}
			$retour_adress .= $sender_daten{stadt};
		}

		add_to_letter(\$letter, "RetourAdresse", $retour_adress);
	}

	if($par{sender_name}) {
		add_to_letter(\$letter, "Name", $par{sender_name});
	}

	if($par{sender_name}) {
		add_to_letter(\$letter, "Unterschrift", $par{sender_name});
	}

	if(exists($sender_daten{email})) {
		add_to_letter(\$letter, "InternetZeileA", $sender_daten{email});
	}

	my $adress_zeile = 'A';
	if(exists($sender_daten{telefon})) {
		add_to_letter(\$letter, "TelefonZeile$adress_zeile", "\\Telefon{$sender_daten{telefon}}");
		$adress_zeile++;
	}

	$letter .= <<EOF
\\trennlinien
\\lochermarke
\\faltmarken
\\fenstermarken

\\addtolength{\\topmargin}{0.95cm}

\\begin{document}
\\begin{g-brief}

%
% Hier kommt der eigentliche Brief hin!
%

\\end{g-brief}
\\end{document}
EOF
;

	open my $fh, '>', $par{dateiname} or die $!;
	print $fh $letter;
	close $fh or die $!;

	print color("green")."Brief erfolgreich erzeugt.".color("reset")."\n";
}

sub add_to_letter {
	my $letter = shift;
	my $command_name = shift;
	my $value = shift // '';
	my $after_command = shift;

	no warnings;
	${$letter} .= "\\$command_name\{$value\}$after_command\n";
	use warnings;
}

sub _help {
	my $error = shift // 0;
	print <<EOF;
--help                                  Diese Hilfe
--Empfaenger="Name"                     Empfängernamen
--Sender="Name"                         Sendername
--Betreff="Betreff"                     Betreff
--Dateiname="filename"                  Dateiname ohne .tex
EOF
	;
	exit($error);
}

sub analyze_args {
	foreach (@_) {
		if(m#^--help$#i) {
			_help();
		} elsif(m#^--dateiname=(.*)$#i) {
			$options{Dateiname} = $1;
		} elsif(m#^--empfaenger=(.*)$#i) {
			$options{Empfaenger} = $1;
		} elsif(m#^--sender=(.*)$#i) {
			$options{Sender} = $1;
		} elsif(m#^--betreff=(.*)$#i) {
			$options{Betreff} = $1;
		} else {
			print color("red")."Unknown parameter $_".color("reset")."\n";
			_help(1);
		}
	}
}
